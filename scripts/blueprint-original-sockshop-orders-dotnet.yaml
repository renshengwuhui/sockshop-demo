tosca_definitions_version: fusionstage_tosca_version_2_1

inputs:
  image-frontend:
    default: "100.125.0.198:20202/hwcse/weaveworksdemos-front-end:latest"
  image-orders:
    default: "100.125.0.198:20202/bigheadbird/orders-dotnet:0.0.4"
  image-payment:
    default: "100.125.0.198:20202/hwcse/weaveworksdemos-payment:latest"
  image-user:
    default: "100.125.0.198:20202/hwcse/weaveworksdemos-user:latest"
  image-carts:
    default: "100.125.0.198:20202/servicestage/weaveworksdemos-carts:latest"
  image-shippingv1:
    default: "100.125.0.198:20202/hwcse/weaveworksdemos-shipping:latest"
  image-catalogue:
    default: "100.125.0.198:20202/servicestage/weaveworksdemos-catalogue:latest"
  image-servmesh:
    default: "100.125.0.198:20202/hwcse/cse-mesher:1.1.2"
  image-mongodb-orders:
    default: "100.125.0.198:20202/hwcse/weaveworksdemos-mongo:latest"
  image-mongodb-users:
    default: "100.125.0.198:20202/hwcse/weaveworksdemos-user-db:latest"
  image-mongodb-carts:
    default: "100.125.0.198:20202/hwcse/weaveworksdemos-mongo:latest"
  image-mysql:
    default: "100.125.0.198:20202/hwcse/weaveworksdemos-catalogue-db:latest"
  proxy:
    default: "http://127.0.0.1:30101"
  frontend_name:
    default: "frontendapp"
  orders_name:
    default: "ordersapp"
  shipping_namev1:
    default: "shippingv1"
  carts_name:
    default: "carts"
  user_name:
    default: "user"
  payment_name:
    default: "paymentapp"
  catalogue_name:
    default: "catalogueapp"
  servmesher_name:
     default: "servmesher"
  cse_reg_addr:
    default: "https://cse.cn-north-1.myhwclouds.com:443"
  cse_center_addr:
    default: "https://cse.cn-north-1.myhwclouds.com:443"
  servicenameforfrontend:
    default: "frontend"
  servicenameforuser:
    default: "user"
  servicenameforcatalogue:
    default: "catalogue"
  servicenameforcarts:
    default: "carts"
  servicenamefororders:
    default: "orders"
  servicenameforshipping:
    default: "shipping"
  servicenameforpayment:
    default: "payment"
  serviceversion:
    default: "0.0.1"
  application:
    default: "sockshop"
  specificaddr:
    default: "127.0.0.1:80"
  java-options:
    default: "-Xms64m -Xmx128m -XX:PermSize=32m -XX:MaxPermSize=64m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom"
  java-options-others:
    default: "-Dhttp.proxyHost=127.0.0.1 -Dhttp.proxyPort=30101 -Xms64m -Xmx128m -XX:PermSize=32m -XX:MaxPermSize=64m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom"
  timeout:
    default: "120"
  orders-db:
    default: "127.0.0.1"
  carts-db:
    default: "127.0.0.1"
  mongo_host:
    default: "127.0.0.1"
  cat_db:
    default: "127.0.0.1"

node_templates:
  cse-localtime-volume:
    type: fusionstage.nodes.LocalVolume
    properties:
      name: localtime
      hostPath: /etc/localtime

  cse-resolv-volume:
    type: fusionstage.nodes.LocalVolume
    properties:
      name: resolv
      hostPath: /etc/resolv.conf

  configmapvolume:
    type: fusionstage.nodes.ConfigMapVolume
    properties:
      name: mesherconfig
      configMapSpec:
        - name: auth.yaml
          value: |
            cse.credentials.accessKey: ${AK_KEY}
            cse.credentials.secretKey: ${SK_KEY}
      createNew: true
  #frontend
  original-sockshop-group:
    type: fusionstage.nodes.AppGroup
    requirements:
      - member:
          node: frontend-app
          relationship: fusionstage.relationships.ConsistsOf
      - member:
          node: orders-app
          relationship: fusionstage.relationships.ConsistsOf
      - member:
          node: shippingv1-app
          relationship: fusionstage.relationships.ConsistsOf
      - member:
          node: carts-app
          relationship: fusionstage.relationships.ConsistsOf
      - member:
          node: user-app
          relationship: fusionstage.relationships.ConsistsOf
      - member:
          node: payment-app
          relationship: fusionstage.relationships.ConsistsOf
      - member:
          node: catalogue-app
          relationship: fusionstage.relationships.ConsistsOf
  #frontend
  frontend-app:
    type: fusionstage.nodes.StatelessApplication
    properties:
      type: container
      name: { get_input: frontend_name }
    requirements:
      - package:
          node: frontend
          relationship: fusionstage.relationships.PackageConsistsOf
      - package:
          node: servmesher
          relationship: fusionstage.relationships.PackageConsistsOf
      - volume:
          node: cse-localtime-volume
          relationship: fusionstage.relationships.AttachesTo
      - volume:
          node: configmapvolume
          relationship: fusionstage.relationships.AttachesTo
      - dependency:
          node: orders-app
          relationship: fusionstage.relationships.ConnectsTo
      - dependency:
          node: catalogue-app
          relationship: fusionstage.relationships.ConnectsTo
      - dependency:
          node: user-app
          relationship: fusionstage.relationships.ConnectsTo
      - dependency:
          node: carts-app
          relationship: fusionstage.relationships.ConnectsTo

  frontend:
    type: fusionstage.nodes.ContainerComponent
    properties:
      package:
        image: { get_input: image-frontend }
        env:
          - name: "http_proxy"
            value: { get_input: proxy }
        serviceSpec:
          type: NodePort
          ports:
            - port: 8079
              nodePort: 32709
              targetPort: 8079
        volumes:
          - name: localtime
            mountPath: /etc/localtime
            readOnly: true

  #servmesher
  servmesher:
    type: fusionstage.nodes.ContainerComponent
    properties:     
      package:
        image: { get_input: image-servmesh }
        env:
          - name: "CSE_REGISTRY_ADDR"
            value: { get_input: cse_reg_addr }
          - name: "CSE_CONFIG_CENTER_ADDR"
            value: { get_input: cse_center_addr }
          - name: "SERVICE_NAME"
            value: { get_input: servicenameforfrontend }
          - name: "VERSION"
            value: { get_input: serviceversion }
          - name: "APP_ID"
            value: { get_input: application }
        volumes:
          - name: localtime
            mountPath: /etc/localtime
            readOnly: true
          - name: mesherconfig
            mountPath: /tmp/
            readOnly: true
  #orders
  orders-app:
    type: fusionstage.nodes.StatelessApplication
    properties:
      type: container
      name: { get_input: orders_name }
    requirements:
      - package:
          node: mongodb-orders
          relationship: fusionstage.relationships.PackageConsistsOf
      - package:
          node: orders
          relationship: fusionstage.relationships.PackageConsistsOf
      - package:
          node: order-servmesher
          relationship: fusionstage.relationships.PackageConsistsOf
      - volume:
          node: cse-localtime-volume
          relationship: fusionstage.relationships.AttachesTo
      - volume:
          node: cse-resolv-volume
          relationship: fusionstage.relationships.AttachesTo
      - volume:
          node: configmapvolume
          relationship: fusionstage.relationships.AttachesTo
      - dependency:
          node: shippingv1-app
          relationship: fusionstage.relationships.ConnectsTo
      - dependency:
          node: payment-app
          relationship: fusionstage.relationships.ConnectsTo
  mongodb-orders:
    type: fusionstage.nodes.ContainerComponent
    properties:
      package:
        image: { get_input: image-mongodb-orders }
        serviceSpec:
          type: ClusterIP
          ports:
            - port: 27017
              name: ordersdb
        resourceSpec:
          request:
            cpu: 1000m
            memory: 1024Mi
          limit:
            cpu: 1000m
            memory: 1024Mi
        volumes:
          - name: localtime
            mountPath: /etc/localtime
            readOnly: false
          - name: resolv
            mountPath: /etc/resolv.conf
            readOnly: false
  orders:
    type: fusionstage.nodes.ContainerComponent
    properties:
      package:
        image: { get_input: image-orders }
        env:
          - name: "_JAVA_OPTIONS"
            value: { get_input: java-options-others }
          - name: "orders_db"
            value: { get_input: orders-db }
          - name: "http_timeout"
            value: { get_input: timeout }
          - name: "http_proxy"
            value: { get_input: proxy }
        serviceSpec:
          type: ClusterIP
          ports:
            - port: 80
              name: ordersport
              targetPort: 80
        resourceSpec:
          request:
            cpu: 500m
            memory: 512Mi
          limit:
            cpu: 2000m
            memory: 2048Mi
        volumes:
          - name: localtime
            mountPath: /etc/localtime
            readOnly: true

  #servmesher
  order-servmesher:
    type: fusionstage.nodes.ContainerComponent
    properties:
      package:
        image: { get_input: image-servmesh }
        env:
          - name: "CSE_REGISTRY_ADDR"
            value: { get_input: cse_reg_addr }
          - name: "CSE_CONFIG_CENTER_ADDR"
            value: { get_input: cse_center_addr }
          - name: "SERVICE_NAME"
            value: { get_input: servicenamefororders }
          - name: "SPECIFIC_ADDR"
            value: { get_input: specificaddr }
          - name: "VERSION"
            value: { get_input: serviceversion }
          - name: "APP_ID"
            value: { get_input: application }
        volumes:
          - name: localtime
            mountPath: /etc/localtime
            readOnly: true
          - name: mesherconfig
            mountPath: /tmp/
            readOnly: true

  # shippingv1
  shippingv1-app:
    type: fusionstage.nodes.StatelessApplication
    properties:
      type: container
      name: { get_input: shipping_namev1 }
    requirements:
      - package:
          node: shippingv1
          relationship: fusionstage.relationships.PackageConsistsOf
      - package:
          node: shipping-servmesher
          relationship: fusionstage.relationships.PackageConsistsOf
      - volume:
          node: cse-localtime-volume
          relationship: fusionstage.relationships.AttachesTo
      - volume:
          node: cse-resolv-volume
          relationship: fusionstage.relationships.AttachesTo
      - volume:
          node: configmapvolume
          relationship: fusionstage.relationships.AttachesTo

  shippingv1:
    type: fusionstage.nodes.ContainerComponent
    properties:
      package:
        image: { get_input: image-shippingv1 }
        env:
          - name: "JAVA_OPTS"
            value: { get_input: java-options }
        serviceSpec:
          type: ClusterIP
          ports:
            - port: 80
              name: shippingport
              targetPort: 80
        volumes:
          - name: localtime
            mountPath: /etc/localtime
            readOnly: true
          - name: resolv
            mountPath: /etc/resolv.conf
            readOnly: true

  #shipping-servmesher
  shipping-servmesher:
    type: fusionstage.nodes.ContainerComponent
    properties:
      package:
        image: { get_input: image-servmesh }
        env:
          - name: "CSE_REGISTRY_ADDR"
            value: { get_input: cse_reg_addr }
          - name: "CSE_CONFIG_CENTER_ADDR"
            value: { get_input: cse_center_addr }
          - name: "SERVICE_NAME"
            value: { get_input: servicenameforshipping }
          - name: "SPECIFIC_ADDR"
            value: { get_input: specificaddr }
          - name: "VERSION"
            value: { get_input: serviceversion }
          - name: "APP_ID"
            value: { get_input: application }
        volumes:
          - name: localtime
            mountPath: /etc/localtime
            readOnly: true
          - name: mesherconfig
            mountPath: /tmp/
            readOnly: true

  #carts
  carts-app:
    type: fusionstage.nodes.StatelessApplication
    properties:
      type: container
      name: { get_input: carts_name }
    requirements:
      - package:
          node: mongodb-carts
          relationship: fusionstage.relationships.PackageConsistsOf
      - package:
          node: carts
          relationship: fusionstage.relationships.PackageConsistsOf
      - package:
          node: carts-servmesher
          relationship: fusionstage.relationships.PackageConsistsOf
      - volume:
          node: cse-localtime-volume
          relationship: fusionstage.relationships.AttachesTo
      - volume:
          node: cse-resolv-volume
          relationship: fusionstage.relationships.AttachesTo
      - volume:
          node: configmapvolume
          relationship: fusionstage.relationships.AttachesTo
  mongodb-carts :
    type: fusionstage.nodes.ContainerComponent
    properties:
      package:
        image: { get_input: image-mongodb-carts }
        serviceSpec:
          type: ClusterIP
          ports:
            - port: 27017
              name: cartsdb
        resourceSpec:
          request:
            cpu: 1000m
            memory: 1024Mi
          limit:
            cpu: 1000m
            memory: 1024Mi
        volumes:
          - name: localtime
            mountPath: /etc/localtime
            readOnly: false
          - name: resolv
            mountPath: /etc/resolv.conf
            readOnly: false
  carts:
    type: fusionstage.nodes.ContainerComponent
    properties:
      package:
        image: { get_input: image-carts }
        env:
          - name: "JAVA_OPTS"
            value: { get_input: java-options }
          - name: "carts_db"
            value: { get_input: carts-db }
        serviceSpec:
          type: ClusterIP
          ports:
            - port: 80
              name: cartsport
              targetPort: 80
        resourceSpec:
          request:
            cpu: 1000m
            memory: 1024Mi
          limit:
            cpu: 2000m
            memory: 2048Mi
        volumes:
          - name: localtime
            mountPath: /etc/localtime
            readOnly: true
          - name: resolv
            mountPath: /etc/resolv.conf
            readOnly: true

  #carts-servmesher
  carts-servmesher:
    type: fusionstage.nodes.ContainerComponent
    properties:
      package:
        image: { get_input: image-servmesh }
        env:
          - name: "CSE_REGISTRY_ADDR"
            value: { get_input: cse_reg_addr }
          - name: "CSE_CONFIG_CENTER_ADDR"
            value: { get_input: cse_center_addr }
          - name: "SERVICE_NAME"
            value: { get_input: servicenameforcarts }
          - name: "SPECIFIC_ADDR"
            value: { get_input: specificaddr }
          - name: "VERSION"
            value: { get_input: serviceversion }
          - name: "APP_ID"
            value: { get_input: application }
        volumes:
          - name: localtime
            mountPath: /etc/localtime
            readOnly: true
          - name: mesherconfig
            mountPath: /tmp/
            readOnly: true
  #user
  user-app:
    type: fusionstage.nodes.StatelessApplication
    properties:
      type: container
      name: { get_input: user_name }
    requirements:
      - package:
          node: mongodb-users
          relationship: fusionstage.relationships.PackageConsistsOf
      - package:
          node: user
          relationship: fusionstage.relationships.PackageConsistsOf
      - package:
          node: user-servmesher
          relationship: fusionstage.relationships.PackageConsistsOf
      - volume:
          node: cse-localtime-volume
          relationship: fusionstage.relationships.AttachesTo
      - volume:
          node: cse-resolv-volume
          relationship: fusionstage.relationships.AttachesTo
      - volume:
          node: configmapvolume
          relationship: fusionstage.relationships.AttachesTo
  mongodb-users:
    type: fusionstage.nodes.ContainerComponent
    properties:
      package:
        image: { get_input: image-mongodb-users }
        serviceSpec:
          type: ClusterIP
          ports:
            - port: 27017
              name: userdb
        resourceSpec:
          request:
            cpu: 1000m
            memory: 1024Mi
          limit:
            cpu: 1000m
            memory: 1024Mi
        volumes:
          - name: localtime
            mountPath: /etc/localtime
            readOnly: false
          - name: resolv
            mountPath: /etc/resolv.conf
            readOnly: false
  user:
    type: fusionstage.nodes.ContainerComponent
    properties:
      package:
        image: { get_input: image-user }
        env:
          - name: "MONGO_HOST"
            value: { get_input: mongo_host }        
        serviceSpec:
          type: ClusterIP
          ports:
            - port: 80
              name: userport
              targetPort: 80
        volumes:
          - name: localtime
            mountPath: /etc/localtime
            readOnly: true
          - name: resolv
            mountPath: /etc/resolv.conf
            readOnly: true

  #user-servmesher
  user-servmesher:
    type: fusionstage.nodes.ContainerComponent
    properties:
      package:
        image: { get_input: image-servmesh }
        env:
          - name: "CSE_REGISTRY_ADDR"
            value: { get_input: cse_reg_addr }
          - name: "CSE_CONFIG_CENTER_ADDR"
            value: { get_input: cse_center_addr }
          - name: "SERVICE_NAME"
            value: { get_input: servicenameforuser }
          - name: "SPECIFIC_ADDR"
            value: { get_input: specificaddr }
          - name: "VERSION"
            value: { get_input: serviceversion }
          - name: "APP_ID"
            value: { get_input: application }
        volumes:
          - name: localtime
            mountPath: /etc/localtime
            readOnly: true
          - name: mesherconfig
            mountPath: /tmp/
            readOnly: true
  #payment
  payment-app:
    type: fusionstage.nodes.StatelessApplication
    properties:
      type: container
      name: { get_input: payment_name }
    requirements:
      - package:
          node: payment
          relationship: fusionstage.relationships.PackageConsistsOf
      - package:
          node: payment-servmesher
          relationship: fusionstage.relationships.PackageConsistsOf
      - volume:
          node: cse-localtime-volume
          relationship: fusionstage.relationships.AttachesTo
      - volume:
          node: cse-resolv-volume
          relationship: fusionstage.relationships.AttachesTo
      - volume:
          node: configmapvolume
          relationship: fusionstage.relationships.AttachesTo
  payment:
    type: fusionstage.nodes.ContainerComponent
    properties:
      package:
        image: { get_input: image-payment }
        serviceSpec:
          type: ClusterIP
          ports:
            - port: 80
              name: paymentport
              targetPort: 80
        volumes:
          - name: localtime
            mountPath: /etc/localtime
            readOnly: true
          - name: resolv
            mountPath: /etc/resolv.conf
            readOnly: true
  #payment-servmesher
  payment-servmesher:
    type: fusionstage.nodes.ContainerComponent
    properties:
      package:
        image: { get_input: image-servmesh }
        env:
          - name: "CSE_REGISTRY_ADDR"
            value: { get_input: cse_reg_addr }
          - name: "CSE_CONFIG_CENTER_ADDR"
            value: { get_input: cse_center_addr }
          - name: "SERVICE_NAME"
            value: { get_input: servicenameforpayment }
          - name: "SPECIFIC_ADDR"
            value: { get_input: specificaddr }
          - name: "VERSION"
            value: { get_input: serviceversion }
          - name: "APP_ID"
            value: { get_input: application }
        volumes:
          - name: localtime
            mountPath: /etc/localtime
            readOnly: true
          - name: mesherconfig
            mountPath: /tmp/
            readOnly: true
  #catalogue
  catalogue-app:
    type: fusionstage.nodes.StatelessApplication
    properties:
      type: container
      name: { get_input: catalogue_name }
    requirements:
      - package:
          node: mysql
          relationship: fusionstage.relationships.PackageConsistsOf
      - package:
          node: catalogue
          relationship: fusionstage.relationships.PackageConsistsOf
      - package:
          node: catalogue-servmesher
          relationship: fusionstage.relationships.PackageConsistsOf 
      - volume:
          node: cse-localtime-volume
          relationship: fusionstage.relationships.AttachesTo
      - volume:
          node: cse-resolv-volume
          relationship: fusionstage.relationships.AttachesTo
      - volume:
          node: configmapvolume
          relationship: fusionstage.relationships.AttachesTo
  mysql:
    type: fusionstage.nodes.ContainerComponent
    properties:
      package:
        image: { get_input: image-mysql }
        env:
          - name: "MYSQL_ALLOW_EMPTY_PASSWORD"
            value: true
          - name: "MYSQL_DATABASE"
            value: socksdb
        serviceSpec:
          type: ClusterIP
          ports:
            - port: 3306
              name: catdb
        resourceSpec:
          request:
            cpu: 1000m
            memory: 1024Mi
          limit:
            cpu: 1000m
            memory: 1024Mi
        volumes:
          - name: localtime
            mountPath: /etc/localtime
            readOnly: false
          - name: resolv
            mountPath: /etc/resolv.conf
            readOnly: false
  catalogue:
    type: fusionstage.nodes.ContainerComponent
    properties:
      package:
        image: { get_input: image-catalogue }
        env:
          - name: "catalogue_db"
            value: { get_input: cat_db }
        serviceSpec:
          type: ClusterIP
          ports:
            - port: 80
              name: catalogueport
              targetPort: 80
        volumes:
          - name: localtime
            mountPath: /etc/localtime
            readOnly: true
          - name: resolv
            mountPath: /etc/resolv.conf
            readOnly: true
  #catalogue-servmesher
  catalogue-servmesher:
    type: fusionstage.nodes.ContainerComponent
    properties:
      package:
        image: { get_input: image-servmesh }
        env:
          - name: "CSE_REGISTRY_ADDR"
            value: { get_input: cse_reg_addr }
          - name: "CSE_CONFIG_CENTER_ADDR"
            value: { get_input: cse_center_addr }
          - name: "SERVICE_NAME"
            value: { get_input: servicenameforcatalogue }
          - name: "SPECIFIC_ADDR"
            value: { get_input: specificaddr }
          - name: "VERSION"
            value: { get_input: serviceversion }
          - name: "APP_ID"
            value: { get_input: application }
        volumes:
          - name: localtime
            mountPath: /etc/localtime
            readOnly: true
          - name: mesherconfig
            mountPath: /tmp/
            readOnly: true
